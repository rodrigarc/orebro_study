# Aggregate and sum up genes with same gene symbol (basically non-coding RNAs)
counts_raw <- aggregate(counts_raw[,-1], list(Geneid=counts_raw[,1]), FUN = sum)
View(counts_raw)
# Change row names to gene names
rownames(counts_raw) <- counts_raw$Geneid
counts_raw <- dplyr::select(counts_raw, -c(Geneid))
#setting up figures and chunks messages
knitr::opts_knit$set(echo = TRUE,
root.dir = getwd(),
fig.width = 6, fig.height = 5,
fig.align = "center",
out.width = 768,
fig.pos = "H",
warning = FALSE,
message = FALSE)
knitr::opts_chunk$set(warning = FALSE,
message = FALSE,
fig.width = 6, fig.height = 5,
fig.align = "center",
out.width = 768,
fig.pos = "H")
result.dir <- paste0("results/",Sys.Date(),"/")
figures.dir <- paste0("results/",Sys.Date(),"/", "figures/")
## creates result.dir with date in if not existent
ifelse(isFALSE(dir.exists(paste0("../",result.dir))), dir.create(paste0("../",result.dir),recursive = TRUE),"Result directory for today exists already!")
ifelse(isFALSE(dir.exists(paste0("../",figures.dir))), dir.create(paste0("../",figures.dir),recursive = TRUE),"Result directory for today exists already!")
options(stringsAsFactors = FALSE)
library(data.table)
library(kableExtra)
library(forcats)
library(caret)
library(C50)
library(mgsub)
library(DESeq2)
library(pheatmap)
library(ggplot2)
library(ggrepel)
library(RColorBrewer)
library(limma)
library(edgeR)
library(enrichR)
library(gridExtra)
library(stringr)
library(ggVennDiagram)
library(dplyr)
library(ensembldb)
library(EnsDb.Hsapiens.v86)
library(factoextra)
library(rafalib)
library(plotly)
library(tibble)
library(devtools)
library(clusterProfiler)
library(enrichplot)
library(pathview)
# Load 1st and 2nd dose raw counts
counts_raw_1_2 <- data.table::fread("../data/proces-data_core-facility/subreadCounts_hg38ens_minus_frag.txt", header = TRUE, sep = "\t") %>%  as.data.frame()
# Load 3rd dose raw counts
counts_raw_3 <- data.table::fread("../data/proces-data_core-facility/3rd_subreadCounts_hg38ens_minus_frag.txt", header = TRUE, sep = "\t") %>% as.data.frame()
# Join raw count data frames
counts_raw <- left_join(counts_raw_1_2, counts_raw_3, by = "Geneid")
# Rename genes based on Emsembl annotation
edb <- EnsDb.Hsapiens.v86
edb_genes <- genes(edb) %>% as.data.frame()
# Remove unnecessary columns and convert 'Geneid' to gene names
counts_raw <- counts_raw %>%
dplyr::select(-contains(c("Chr", "Start", "End", "Strand", "Length"))) %>%
dplyr::mutate(Geneid = plyr::mapvalues(x = counts_raw$Geneid,
from = edb_genes$gene_id,
to = edb_genes$symbol,
warn_missing = FALSE))
# Aggregate and sum up genes with same gene symbol (basically non-coding RNAs)
counts_raw <- aggregate(counts_raw[,-1], list(Geneid=counts_raw[,1]), FUN = sum)
# Change row names to gene names
rownames(counts_raw) <- counts_raw$Geneid
counts_raw <- dplyr::select(counts_raw, -c(Geneid))
# Load 1st and 2nd dose metadata
sampleTable <- read.table("../data/metadata/sample_metadata.csv", sep = ",", header = TRUE)
# Add batch (time of sequencing) and dose column
sampleTable <- sampleTable %>%
mutate(batch = case_when(visit <= 5 ~ "first")) %>%
mutate(dose  = as.factor(plyr::mapvalues(visit,
from = c(1,2,4,5),
to   = c("0_dose1","24_dose1","0_dose2","24_dose2"))),
group = as.factor(group))
# Remove incomplete sample
sampleTable<-subset(sampleTable, sample_ID!="P22761_1037_S37")
# Synchronize count data with sample table
counts_raw <- counts_raw[, pmatch(sampleTable$sample_ID, colnames(counts_raw))]
colnames(counts_raw) <- sampleTable$sample_ID
all(rownames(sampleTable$sample_ID) == colnames(counts_raw))
View(counts_raw)
View(counts_raw_3)
# Load 1st and 2nd dose raw counts
counts_raw_1_2 <- data.table::fread("../data/proces-data_core-facility/subreadCounts_hg38ens_minus_frag.txt", header = TRUE, sep = "\t") %>%  as.data.frame()
# Load 3rd dose raw counts
counts_raw_3 <- data.table::fread("../data/proces-data_core-facility/3rd_subreadCounts_hg38ens_minus_frag.txt", header = TRUE, sep = "\t") %>% as.data.frame()
# Join raw count data frames
# counts_raw <- left_join(counts_raw_1_2, counts_raw_3, by = "Geneid")
counts_raw  <- counts_raw_3
# Rename genes based on Emsembl annotation
edb <- EnsDb.Hsapiens.v86
edb_genes <- genes(edb) %>% as.data.frame()
# Remove unnecessary columns and convert 'Geneid' to gene names
counts_raw <- counts_raw %>%
dplyr::select(-contains(c("Chr", "Start", "End", "Strand", "Length"))) %>%
dplyr::mutate(Geneid = plyr::mapvalues(x = counts_raw$Geneid,
from = edb_genes$gene_id,
to = edb_genes$symbol,
warn_missing = FALSE))
# Aggregate and sum up genes with same gene symbol (basically non-coding RNAs)
counts_raw <- aggregate(counts_raw[,-1], list(Geneid=counts_raw[,1]), FUN = sum)
# Change row names to gene names
rownames(counts_raw) <- counts_raw$Geneid
counts_raw <- dplyr::select(counts_raw, -c(Geneid))
View(counts_raw)
View(counts_raw_1_2)
View(sampleTable)
# Load 1st and 2nd dose metadata
sampleTable <- read.table("../data/metadata/sample_metadata.csv", sep = ",", header = TRUE)
View(sampleTable)
# Load 1st batch metadata
sampleTable <- read.table("../data/metadata/sample_metadata.csv_1", sep = ",", header = TRUE)
# Load 1st batch metadata
sampleTable <- read.table("../data/metadata/sample_metadata_1.csv", sep = ",", header = TRUE)
View(sampleTable)
# Load 2nd batch metadata
sample_table2 <- read.table("../data/metadata/Samplesheet RNASeq CoVacc_Inferred NGI IDs.xlsx")
# Load 2nd batch metadata
sample_table2 <- read.table("../data/metadata/Samplesheet RNASeq CoVacc_Inferred NGI IDs.xlsx",  sep = ",", header = TRUE)
# Load 2nd batch metadata
sample_table2 <- read.table("../data/metadata/Samplesheet RNASeq CoVacc_Inferred NGI IDs.xlsx", sep = ",", header = TRUE)
View(sample_table2)
library(readxl)
sample_table2 <- read_excel("data/metadata/Samplesheet RNASeq CoVacc_Inferred NGI IDs.xlsx")
View(sample_table2)
typeof(sample_table2)
View(sample_table2)
is.data.frame(sample_table2)
View(sampleTable)
View(sample_table2)
# Load 1st batch metadata
sampleTable <- read.table("../data/metadata/sample_metadata_1.csv", sep = ",", header = TRUE)
# Load 2nd batch metadata
sample_table2 <- read_excel("../data/metadata/Samplesheet RNASeq CoVacc_Inferred NGI IDs.xlsx")
# Add batch (time of sequencing) column, and dose column
sampleTable <- sampleTable %>%
mutate(dose  = as.factor(plyr::mapvalues(visit,
from = c(1,2,4,5),
to   = c("0_dose1","24_dose1","0_dose2","24_dose2"))),
group = as.factor(group))
#setting up figures and chunks messages
knitr::opts_knit$set(echo = TRUE,
root.dir = getwd(),
fig.width = 6, fig.height = 5,
fig.align = "center",
out.width = 768,
fig.pos = "H",
warning = FALSE,
message = FALSE)
knitr::opts_chunk$set(warning = FALSE,
message = FALSE,
fig.width = 6, fig.height = 5,
fig.align = "center",
out.width = 768,
fig.pos = "H")
result.dir <- paste0("results/",Sys.Date(),"/")
figures.dir <- paste0("results/",Sys.Date(),"/", "figures/")
## creates result.dir with date in if not existent
ifelse(isFALSE(dir.exists(paste0("../",result.dir))), dir.create(paste0("../",result.dir),recursive = TRUE),"Result directory for today exists already!")
ifelse(isFALSE(dir.exists(paste0("../",figures.dir))), dir.create(paste0("../",figures.dir),recursive = TRUE),"Result directory for today exists already!")
options(stringsAsFactors = FALSE)
library(data.table)
library(kableExtra)
library(forcats)
library(caret)
library(C50)
library(mgsub)
library(DESeq2)
library(pheatmap)
library(ggplot2)
library(ggrepel)
library(RColorBrewer)
library(limma)
library(edgeR)
library(enrichR)
library(gridExtra)
library(stringr)
library(ggVennDiagram)
library(dplyr)
library(ensembldb)
library(EnsDb.Hsapiens.v86)
library(factoextra)
library(rafalib)
library(plotly)
library(tibble)
library(devtools)
library(clusterProfiler)
library(enrichplot)
library(pathview)
# Load 1st batch raw counts
counts_raw_1_2 <- data.table::fread("../data/proces-data_core-facility/subreadCounts_hg38ens_minus_frag.txt", header = TRUE, sep = "\t") %>%  as.data.frame()
# Load 2nd batch raw counts
counts_raw_3 <- data.table::fread("../data/proces-data_core-facility/3rd_subreadCounts_hg38ens_minus_frag.txt", header = TRUE, sep = "\t") %>% as.data.frame()
# Join raw count data frames
# counts_raw <- left_join(counts_raw_1_2, counts_raw_3, by = "Geneid")
counts_raw  <- counts_raw_3
# Rename genes based on Emsembl annotation
edb <- EnsDb.Hsapiens.v86
edb_genes <- genes(edb) %>% as.data.frame()
# Remove unnecessary columns and convert 'Geneid' to gene names
counts_raw <- counts_raw %>%
dplyr::select(-contains(c("Chr", "Start", "End", "Strand", "Length"))) %>%
dplyr::mutate(Geneid = plyr::mapvalues(x = counts_raw$Geneid,
from = edb_genes$gene_id,
to = edb_genes$symbol,
warn_missing = FALSE))
# Aggregate and sum up genes with same gene symbol (basically non-coding RNAs)
counts_raw <- aggregate(counts_raw[,-1], list(Geneid=counts_raw[,1]), FUN = sum)
# Change row names to gene names
rownames(counts_raw) <- counts_raw$Geneid
counts_raw <- dplyr::select(counts_raw, -c(Geneid))
# Load 1st batch metadata
sampleTable <- read.table("../data/metadata/sample_metadata_1.csv", sep = ",", header = TRUE)
# Load 2nd batch metadata
sample_table2 <- read_excel("../data/metadata/Samplesheet RNASeq CoVacc_Inferred NGI IDs.xlsx")
# Add batch (time of sequencing) column, and dose column
sampleTable <- sampleTable %>%
mutate(dose  = as.factor(plyr::mapvalues(visit,
from = c(1,2,4,5),
to   = c("0_dose1","24_dose1","0_dose2","24_dose2"))),
group = as.factor(group))
# Remove incomplete sample
sampleTable<-subset(sampleTable, sample_ID!="P22761_1037_S37")
# Synchronize count data with sample table
counts_raw <- counts_raw[, pmatch(sampleTable$sample_ID, colnames(counts_raw))]
# Synchronize count data with sample table
counts_raw <- counts_raw[, pmatch(sampleTable$sample_ID, colnames(counts_raw))]
colnames(counts_raw) <- sampleTable$sample_ID
all(rownames(sampleTable$sample_ID) == colnames(counts_raw))
# Synchronize count data with sample table
counts_raw <- counts_raw[, pmatch(sampleTable$sample_ID, colnames(counts_raw))]
colnames(counts_raw) <- sampleTable$sample_ID
all(rownames(sampleTable$sample_ID) == colnames(counts_raw))
#setting up figures and chunks messages
knitr::opts_knit$set(echo = TRUE,
root.dir = getwd(),
fig.width = 6, fig.height = 5,
fig.align = "center",
out.width = 768,
fig.pos = "H",
warning = FALSE,
message = FALSE)
knitr::opts_chunk$set(warning = FALSE,
message = FALSE,
fig.width = 6, fig.height = 5,
fig.align = "center",
out.width = 768,
fig.pos = "H")
result.dir <- paste0("results/",Sys.Date(),"/")
figures.dir <- paste0("results/",Sys.Date(),"/", "figures/")
## creates result.dir with date in if not existent
ifelse(isFALSE(dir.exists(paste0("../",result.dir))), dir.create(paste0("../",result.dir),recursive = TRUE),"Result directory for today exists already!")
ifelse(isFALSE(dir.exists(paste0("../",figures.dir))), dir.create(paste0("../",figures.dir),recursive = TRUE),"Result directory for today exists already!")
options(stringsAsFactors = FALSE)
library(data.table)
library(kableExtra)
library(forcats)
library(caret)
library(C50)
library(mgsub)
library(DESeq2)
library(pheatmap)
library(ggplot2)
library(ggrepel)
library(RColorBrewer)
library(limma)
library(edgeR)
library(enrichR)
library(gridExtra)
library(stringr)
library(ggVennDiagram)
library(dplyr)
library(ensembldb)
library(EnsDb.Hsapiens.v86)
library(factoextra)
library(rafalib)
library(plotly)
library(tibble)
library(devtools)
library(clusterProfiler)
library(enrichplot)
library(pathview)
```{r, results=FALSE}
library(data.table)
library(kableExtra)
library(forcats)
library(caret)
library(C50)
library(mgsub)
library(DESeq2)
library(pheatmap)
library(ggplot2)
library(ggrepel)
library(RColorBrewer)
library(limma)
library(edgeR)
library(enrichR)
library(gridExtra)
library(stringr)
library(ggVennDiagram)
library(dplyr)
library(ensembldb)
library(EnsDb.Hsapiens.v86)
library(factoextra)
library(rafalib)
library(plotly)
library(tibble)
library(devtools)
library(clusterProfiler)
library(enrichplot)
library(pathview)
#setting up figures and chunks messages
knitr::opts_knit$set(echo = TRUE,
root.dir = getwd(),
fig.width = 6, fig.height = 5,
fig.align = "center",
out.width = 768,
fig.pos = "H",
warning = FALSE,
message = FALSE)
knitr::opts_chunk$set(warning = FALSE,
message = FALSE,
fig.width = 6, fig.height = 5,
fig.align = "center",
out.width = 768,
fig.pos = "H")
result.dir <- paste0("results/",Sys.Date(),"/")
figures.dir <- paste0("results/",Sys.Date(),"/", "figures/")
## creates result.dir with date in if not existent
ifelse(isFALSE(dir.exists(paste0("../",result.dir))), dir.create(paste0("../",result.dir),recursive = TRUE),"Result directory for today exists already!")
ifelse(isFALSE(dir.exists(paste0("../",figures.dir))), dir.create(paste0("../",figures.dir),recursive = TRUE),"Result directory for today exists already!")
options(stringsAsFactors = FALSE)
library(data.table)
library(kableExtra)
library(forcats)
library(caret)
library(C50)
library(mgsub)
library(DESeq2)
library(pheatmap)
library(ggplot2)
library(ggrepel)
library(RColorBrewer)
library(limma)
library(edgeR)
library(enrichR)
library(gridExtra)
library(stringr)
library(ggVennDiagram)
library(dplyr)
library(ensembldb)
library(EnsDb.Hsapiens.v86)
library(factoextra)
library(rafalib)
library(plotly)
library(tibble)
library(devtools)
library(clusterProfiler)
library(enrichplot)
library(pathview)
# Load 1st batch raw counts
counts_raw_1_2 <- data.table::fread("../data/proces-data_core-facility/subreadCounts_hg38ens_minus_frag.txt", header = TRUE, sep = "\t") %>%  as.data.frame()
# Load 2nd batch raw counts
counts_raw_3 <- data.table::fread("../data/proces-data_core-facility/3rd_subreadCounts_hg38ens_minus_frag.txt", header = TRUE, sep = "\t") %>% as.data.frame()
# Join raw count data frames
# counts_raw <- left_join(counts_raw_1_2, counts_raw_3, by = "Geneid")
counts_raw  <- counts_raw_3
# Rename genes based on Emsembl annotation
edb <- EnsDb.Hsapiens.v86
edb_genes <- genes(edb) %>% as.data.frame()
# Remove unnecessary columns and convert 'Geneid' to gene names
counts_raw <- counts_raw %>%
dplyr::select(-contains(c("Chr", "Start", "End", "Strand", "Length"))) %>%
dplyr::mutate(Geneid = plyr::mapvalues(x = counts_raw$Geneid,
from = edb_genes$gene_id,
to = edb_genes$symbol,
warn_missing = FALSE))
# Aggregate and sum up genes with same gene symbol (basically non-coding RNAs)
counts_raw <- aggregate(counts_raw[,-1], list(Geneid=counts_raw[,1]), FUN = sum)
# Change row names to gene names
rownames(counts_raw) <- counts_raw$Geneid
counts_raw <- dplyr::select(counts_raw, -c(Geneid))
# Load 1st batch metadata
sampleTable <- read.table("../data/metadata/sample_metadata_1.csv", sep = ",", header = TRUE)
# Load 2nd batch metadata
sampleTable2 <- read_excel("../data/metadata/Samplesheet RNASeq CoVacc_Inferred NGI IDs.xlsx")
library(data.table)
library(kableExtra)
library(forcats)
library(caret)
library(C50)
library(mgsub)
library(DESeq2)
library(pheatmap)
library(ggplot2)
library(ggrepel)
library(RColorBrewer)
library(limma)
library(edgeR)
library(enrichR)
library(gridExtra)
library(stringr)
library(ggVennDiagram)
library(dplyr)
library(ensembldb)
library(EnsDb.Hsapiens.v86)
library(factoextra)
library(rafalib)
library(plotly)
library(tibble)
library(devtools)
library(clusterProfiler)
library(enrichplot)
library(pathview)
library(readxl)
# Load 1st batch metadata
sampleTable <- read.table("../data/metadata/sample_metadata_1.csv", sep = ",", header = TRUE)
# Load 2nd batch metadata
sampleTable2 <- read_excel("../data/metadata/Samplesheet RNASeq CoVacc_Inferred NGI IDs.xlsx")
# Change visits to dose column
sampleTable <- sampleTable %>%
mutate(dose  = as.factor(plyr::mapvalues(visit,
from = c(1,2,4,5),
to   = c("0_dose1","24_dose1","0_dose2","24_dose2"))),
group = as.factor(group))
# Remove incomplete sample
sampleTable<-subset(sampleTable, sample_ID!="P22761_1037_S37")
# Synchronize count data with sample table
counts_raw <- counts_raw[, pmatch(sampleTable$sample_ID, colnames(counts_raw))]
View(sampleTable2)
# Synchronize count data with sample table
counts_raw <- counts_raw[, pmatch(sampleTable$sample_ID, colnames(counts_raw))]
colnames(counts_raw) <- sampleTable$sample_ID
all(rownames(sampleTable$sample_ID) == colnames(counts_raw))
# Synchronize count data with sample table
counts_raw <- counts_raw[, pmatch(sampleTable$sample_ID, colnames(counts_raw))]
# Load 1st batch metadata
sampleTable <- read.table("../data/metadata/sample_metadata_1.csv", sep = ",", header = TRUE)
# Change visits to dose column
sampleTable <- sampleTable %>%
mutate(dose  = as.factor(plyr::mapvalues(visit,
from = c(1,2,4,5),
to   = c("0_dose1","24_dose1","0_dose2","24_dose2"))),
group = as.factor(group))
# Remove incomplete sample
sampleTable<-subset(sampleTable, sample_ID!="P22761_1037_S37")
# Synchronize count data with sample table
colnames(counts_raw) <- sampleTable$sample_ID
counts_raw <- counts_raw[, pmatch(sampleTable$sample_ID, colnames(counts_raw))]
all(rownames(sampleTable$sample_ID) == colnames(counts_raw))
# Load 2nd batch metadata
sampleTable2 <- read_excel("../data/metadata/Samplesheet RNASeq CoVacc_Inferred NGI IDs.xlsx")
# Load 2nd batch metadata
sampleTable2 <- read_excel("../data/metadata/Samplesheet RNASeq CoVacc_Inferred NGI IDs.xlsx") %>%
as.data.frame()
View(sampleTable2)
# Change visits to dose column
sampleTable2 <- sampleTable %>%
mutate(dose  = as.factor(plyr::mapvalues(visit,
from = c(1, 2, 4, 5, 10, 11, 12),
to   = c("0_dose1", "24_dose1", "0_dose2", "24_dose2", "0_dose3", "24_dose3", "48_dose3"))),
group = as.factor(group))
# Load 2nd batch metadata
sampleTable2 <- read_excel("../data/metadata/Samplesheet RNASeq CoVacc_Inferred NGI IDs.xlsx")
# Change visits to dose column
sampleTable2 <- sampleTable %>%
mutate(dose  = as.factor(plyr::mapvalues(visit,
from = c(1, 2, 4, 5, 10, 11, 12),
to   = c("0_dose1", "24_dose1", "0_dose2", "24_dose2", "0_dose3", "24_dose3", "48_dose3"))),
group = as.factor(group))
# Load 2nd batch metadata
sampleTable2 <- read_excel("../data/metadata/Samplesheet RNASeq CoVacc_Inferred NGI IDs.xlsx")
View(sampleTable2)
View(sampleTable2)
# Change visits to dose column
sampleTable2 <- sampleTable2 %>%
mutate(dose  = as.factor(plyr::mapvalues(visit,
from = c(1, 2, 4, 5, 10, 11, 12),
to   = c("0_dose1", "24_dose1", "0_dose2", "24_dose2", "0_dose3", "24_dose3", "48_dose3"))),
group = as.factor(group))
# Change visits to dose column
sampleTable2 <- sampleTable2 %>%
mutate(dose  = as.factor(plyr::mapvalues(Visit,
from = c(1, 2, 4, 5, 10, 11, 12),
to   = c("0_dose1", "24_dose1", "0_dose2", "24_dose2", "0_dose3", "24_dose3", "48_dose3"))),
group = as.factor(group))
# Change visits to dose column
sampleTable2 <- sampleTable2 %>%
from = c(1, 2, 4, 5, 10, 11, 12),
# Change visits to dose column
sampleTable2 <- sampleTable2 %>%
mutate(dose  = as.factor(plyr::mapvalues(Visit,
from = c(1, 2, 4, 5, 10, 11, 12),
to   = c("0_dose1", "24_dose1", "0_dose2", "24_dose2", "0_dose3", "24_dose3", "48_dose3"))))
View(sampleTable2)
# Change visits to dose column
sampleTable2 <- sampleTable2 %>%
mutate(dose  = as.factor(plyr::mapvalues(Visit,
from = c(1, 2, 4, 5, 10, 11, 12),
to   = c("0_dose1", "24_dose1", "0_dose2", "24_dose2", "0_dose3", "24_dose3", "48_dose3"))),
group = as.factor(Subgroup))
