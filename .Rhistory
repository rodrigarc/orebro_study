attributes= c("ensembl_gene_id",
"hgnc_symbol"),
values=genes,
mart= mart)
G_list <- G_list[G_list$hgnc_symbol != "",]
cr <- countTable[,7:45]
rownames(cr) <- countTable$Geneid
#gsub('P22761_100', '', sampleTable$sample_ID, fixed = TRUE)
mr <- sampleTable
rownames(mr) <- sampleTable$sample_ID
str_trim(mr$group, side = c("both"))
all.equal(colnames(cr),rownames(mr))
all(rownames(mr) == colnames(cr))
write.csv(cr,file="data/gene_counts_raw.csv",quote=FALSE)
write.csv(mr,file="data/metadata_raw.csv",quote=FALSE)
# visualise the distribution of counts using a boxplot and density plot
rafalib::mypar(1,2,mar=c(6,3,3,2))
boxplot(log2(as.matrix(cr)+1),ylab=expression('Log'[2]~'Read counts'),las=2,main="Raw data")
hist(log2(as.matrix(cr)+1),ylab="",las=2,main="Raw data")
par(mfrow=c(1,1))
# check if any samples need to be discarded based on the number of genes detected
barplot(colSums(cr>3),ylab="Number of detected genes",las=2)
abline(h=median(colSums(cr>3)))
# plot for detection rate across genes
hist(rowSums(cr>3))
# remove genes with low counts
# what should be the cut off? How many reads in how many samples? 3-5
keep_genes <- rowSums( cr > 5 ) >= 3
cf <- cr[keep_genes,]
sum(keep_genes)
# Distribution of the filtered counts
boxplot(log2(as.matrix(cf)+1),ylab=expression('Log'[2]~'Read counts'),las=2,main="Filtered data")
hist(rowSums(cf>3))
# Since no samples were discarded, the metadata file will remain the same. And we can check that the labels are in the same order in counts and metadata
all.equal(colnames(cf),rownames(mr))
all(colnames(cf) == rownames(mr))
write.csv(cf,"./data/counts_filtered.csv",quote=F)
cf <- read.csv("data/counts_filtered.csv",stringsAsFactors=F,row.names=1)
if(!exists("mr")) mr <- read.csv("data/metadata_raw.csv",stringsAsFactors=F,row.names=1)
all.equal(colnames(cf),rownames(mr))
mr$group <- factor(mr$group)
d <- DESeqDataSetFromMatrix(countData=cf,colData=mr,design=~group + visit)
# DESeq2 Design formula: condition of interest should come last in the formula with the other factors preceding it in any order
d <- DESeq2::estimateSizeFactors(d,type="ratio")
cd <- log2( counts(d,normalized=TRUE) + 1 )
saveRDS(cd,"data/gene_counts_normalised_deseq2.Rds")
cd <- readRDS("data/gene_counts_normalised_deseq2.Rds")
boxplot(cd,ylab=expression('Log'[2]~'Read counts'),las=2,main="DESeq2")
# Use DESeq object created above
# Transform the normalized counts
vst <- vst(d, blind=TRUE)
#vst <- rlog(d, blind = TRUE)
# Extract the vst matrix of transformed counts
vst_mat <- assay(vst)
# Compute pairwise correlation values (cluster by sample)
vst_cor_mat <- cor(vst_mat)
View(vst_cor_mat)
# Plot heatmapÂ¨
mr <- mr %>%
mutate(visit = as.factor(visit))
pheatmap(vst_cor_mat, annotation = select(mr, visit, group), clustering_method = "ward.D2")
# Plot PCA
DESeq2::plotPCA(vst, intgroup="group")
#For the purpose of exploratory analysis such as MDS, PCA, clustering etc, VST (variance-stabilizing-transformation) is recommended
cv <- as.data.frame(assay(varianceStabilizingTransformation(d,blind=T)),check.names=F)
#??varianceStabilizingTransformation
write.csv(cv,"./data/gene_counts_vst.csv",quote=FALSE)
boxplot(cv,ylab=expression('Log'[2]~'Read counts'),las=2,main="VST")
pca <- prcomp(t(cv), scale=TRUE)
#prcomp expect samples-rows, genes-columns, t-function reverses
plot(pca$x[,1], pca$x[,2]) # x = PCs
## make a scree plot to compute PC variance
pca.var <- pca$sdev^2
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
barplot(pca.var.per, main="Scree Plot", xlab="Principal Component", ylab="Percent Variation")
## plot showing the PCs and the variation:
pca.data <- data.frame(Sample=rownames(pca$x),
X=pca$x[,1],
Y=pca$x[,2])
pca.data #!add colums!
ggplot(data=pca.data, aes(x=X, y=Y, label=Sample)) +
geom_text() +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("My PCA Graph")
## name of the top 10  genes that contribute most to pc1.
loading_scores <- pca$rotation[,1]
gene_scores <- abs(loading_scores) ## get the magnitudes
gene_score_ranked <- sort(gene_scores, decreasing=TRUE)
top_10_genes <- names(gene_score_ranked[1:10])
top_10_genes ## show the names of the top 10 genes
pca$rotation[top_10_genes,1] ## show the scores (and +/- sign)
ggplot(data=pca.data, aes(x=X, y=Y, label=Sample)) +
geom_point() +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("My PCA Graph")
## name of the top 10  genes that contribute most to pc1.
loading_scores <- pca$rotation[,1]
gene_scores <- abs(loading_scores) ## get the magnitudes
gene_score_ranked <- sort(gene_scores, decreasing=TRUE)
top_10_genes <- names(gene_score_ranked[1:10])
top_10_genes ## show the names of the top 10 genes
pca$rotation[top_10_genes,1] ## show the scores (and +/- sign)
pca <- prcomp(t(cv), scale=TRUE)
#prcomp expect samples-rows, genes-columns, t-function reverses
plot(pca$x[,1], pca$x[,2]) # x = PCs
## make a scree plot to compute PC variance
pca.var <- pca$sdev^2
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
barplot(pca.var.per, main="Scree Plot", xlab="Principal Component", ylab="Percent Variation")
## plot showing the PCs and the variation:
pca.data <- data.frame(Sample=rownames(pca$x),
X=pca$x[,1],
Y=pca$x[,2])
pca.data #!add colums!
ggplot(data=pca.data, aes(x=X, y=Y, label=Sample)) +
geom_point() +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("My PCA Graph")
## name of the top 10  genes that contribute most to pc1.
loading_scores <- pca$rotation[,1]
gene_scores <- abs(loading_scores) ## get the magnitudes
gene_score_ranked <- sort(gene_scores, decreasing=TRUE)
top_10_genes <- names(gene_score_ranked[1:10])
top_10_genes ## show the names of the top 10 genes
pca$rotation[top_10_genes,1] ## show the scores (and +/- sign)
pca <- prcomp(t(cv), scale=TRUE)
#prcomp expect samples-rows, genes-columns, t-function reverses
plot(pca$x[,1], pca$x[,2]) # x = PCs
## make a scree plot to compute PC variance
pca.var <- pca$sdev^2
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
barplot(pca.var.per, main="Scree Plot", xlab="Principal Component", ylab="Percent Variation")
## plot showing the PCs and the variation:
pca.data <- data.frame(Sample=rownames(pca$x),
X=pca$x[,1],
Y=pca$x[,2])
pca.data #!add colums!
ggplot(data=pca.data, aes(x=X, y=Y, label=Sample)) +
geom_text() +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("My PCA Graph")
## name of the top 10  genes that contribute most to pc1.
loading_scores <- pca$rotation[,1]
gene_scores <- abs(loading_scores) ## get the magnitudes
gene_score_ranked <- sort(gene_scores, decreasing=TRUE)
top_10_genes <- names(gene_score_ranked[1:10])
top_10_genes ## show the names of the top 10 genes
pca$rotation[top_10_genes,1] ## show the scores (and +/- sign)
ggplot(data=pca.data, aes(x=X, y=Y, label=Sample)) +
geom_text() +
geom_smooth()
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("My PCA Graph")
ggplot(data=pca.data, aes(x=X, y=Y, label=Sample)) +
geom_text()
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("My PCA Graph")
pca <- prcomp(t(cv), scale=TRUE)
#prcomp expect samples-rows, genes-columns, t-function reverses
plot(pca$x[,1], pca$x[,2]) # x = PCs
## make a scree plot to compute PC variance
pca.var <- pca$sdev^2
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
barplot(pca.var.per, main="Scree Plot", xlab="Principal Component", ylab="Percent Variation")
## plot showing the PCs and the variation:
pca.data <- data.frame(Sample=rownames(pca$x),
X=pca$x[,1],
Y=pca$x[,2])
pca.data #!add colums!
ggplot(data=pca.data, aes(x=X, y=Y, label=Sample)) +
geom_text()
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("My PCA Graph")
ggplot(data=pca.data, aes(x=X, y=Y, label=Sample)) +
geom_text() +
geom_smooth() +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("My PCA Graph")
ggplot(data=pca.data, aes(x=X, y=Y, label=Sample)) +
geom_point() +
geom_smooth() +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("My PCA Graph")
ggplot(data=pca.data, aes(x=X, y=Y, label=Sample)) +
geom_point(aes(color=group)) +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("My PCA Graph")
View(pca.data)
ggplot(data=pca.data, aes(x=X, y=Y, label=Sample)) +
geom_point(aes(color=Sample)) +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("My PCA Graph")
sales_vs_targets <- pca.data %>%
inner_join(mr)
pca.data_join <-  pca.data %>%
left_join(mr)
??left_join
## plot showing the PCs and the variation:
pca.data <- data.frame(Sample=rownames(pca$x),
X=pca$x[,1],
Y=pca$x[,2])
pca.data #!add colums!
pca.data_join <-  cbind(pca.data, mr[c("visit", "group")])
View(pca.data_join)
#visit and group columns
pca.data_join <-  cbind(pca.data, mr[c("visit", "group")])
ggplot(data=pca.data_join, aes(x=X, y=Y, label=Sample)) +
geom_point(aes(color=)) +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("My PCA Graph")
ggplot(data=pca.data_join, aes(x=X, y=Y, label=Sample)) +
geom_point() +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("My PCA Graph")
ggplot(data=pca.data_join, aes(x=X, y=Y, label=Sample)) +
geom_text() +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("My PCA Graph")
ggplot(data=pca.data_join, aes(x=X, y=Y, label=Sample)) +
geom_text(aes(color=group)) +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("My PCA Graph")
ggplot(data=pca.data_join, aes(x=X, y=Y, label=Sample)) +
geom_text(aes(color=group, visit)) +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("My PCA Graph")
ggplot(data=pca.data_join, aes(x=X, y=Y, label=Sample)) +
geom_point(aes(color=group, visit)) +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("My PCA Graph")
ggplot(data=pca.data_join, aes(x=X, y=Y, label=Sample)) +
geom_point(aes(color=group)) +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("My PCA Graph")
pca <- prcomp(t(cv), scale=TRUE)
#prcomp expect samples-rows, genes-columns, t-function reverses
plot(pca$x[,1], pca$x[,2]) # x = PCs
## make a scree plot to compute PC variance
pca.var <- pca$sdev^2
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
barplot(pca.var.per, main="Scree Plot", xlab="Principal Component", ylab="Percent Variation")
## plot showing the PCs and the variation:
pca.data <- data.frame(Sample=rownames(pca$x),
X=pca$x[,1],
Y=pca$x[,2])
pca.data
#visit and group columns
pca.data_join <-  cbind(pca.data, mr[c("visit", "group")])
ggplot(data=pca.data_join, aes(x=X, y=Y, label=Sample)) +
geom_point(aes(color=group)) +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("My PCA Graph")
## name of the top 10  genes that contribute most to pc1.
loading_scores <- pca$rotation[,1]
gene_scores <- abs(loading_scores) ## get the magnitudes
gene_score_ranked <- sort(gene_scores, decreasing=TRUE)
top_10_genes <- names(gene_score_ranked[1:10])
top_10_genes ## show the names of the top 10 genes
pca$rotation[top_10_genes,1] ## show the scores (and +/- sign)
View(pca)
View(d)
View(deseq_data)
View(d)
View(cd)
View(cd)
View(cd)
View(cd)
#reading data
sampleTable <- read.csv("data/proces-data_core-facility/sample_metadata.csv")
#gonna add more
countTable <- data.table::fread("data/proces-data_core-facility/subreadCounts_hg38ens_minus.txt", header = TRUE, sep = "\t") %>%
as.data.frame()
View(countTable)
genes <- countTable$Geneid
G_list <- getBM(filters= "ensembl_gene_id",
attributes= c("ensembl_gene_id",
"hgnc_symbol"),
values=genes,
mart= mart)
G_list <- G_list[G_list$hgnc_symbol != "",]
cr_raw_counts <- countTable[,7:45]
rownames(cr_raw_counts) <- countTable$Geneid
#gsub('P22761_100', '', sampleTable$sample_ID, fixed = TRUE)
mr_metatable <- sampleTable
rownames(mr_metatable) <- sampleTable$sample_ID
str_trim(mr_metatable$group, side = c("both"))
all.equal(colnames(cr_raw_counts),rownames(mr_metatable))
all(rownames(mr_metatable) == colnames(cr_raw_counts))
write.csv(cr_raw_counts,file="data/gene_counts_raw.csv",quote=FALSE)
write.csv(mr_metatable,file="data/metadata_raw.csv",quote=FALSE)
# visualise the distribution of counts using a boxplot and density plot
rafalib::mypar(1,2,mar=c(6,3,3,2))
boxplot(log2(as.matrix(cr_raw_counts)+1),ylab=expression('Log'[2]~'Read counts'),las=2,main="Raw data")
boxplot(log2(as.matrix(cr_raw_counts)+1),ylab=expression('Log'[2]~'Read counts'),las=2,main="Raw data")
hist(log2(as.matrix(cr_raw_counts)+1),ylab="",las=2,main="Raw data")
hist(log2(as.matrix(cr_raw_counts)+1),ylab="",las=2,main="Raw data")
par(mfrow=c(1,1))
# visualise the distribution of counts using a boxplot and density plot
rafalib::mypar(1,2,mar=c(6,3,3,2))
boxplot(log2(as.matrix(cr_raw_counts)+1),ylab=expression('Log'[2]~'Read counts'),las=2,main="Raw data")
hist(log2(as.matrix(cr_raw_counts)+1),ylab="",las=2,main="Raw data")
par(mfrow=c(1,1))
# check if any samples need to be discarded based on the number of genes detected
barplot(colSums(cr_raw_counts>3),ylab="Number of detected genes",las=2)
abline(h=median(colSums(cr_raw_counts>3)))
# plot for detection rate across genes
hist(rowSums(cr_raw_counts>3))
# remove genes with low counts
# what should be the cut off? How many reads in how many samples? 3-5
keep_genes <- rowSums( cr_raw_counts > 5 ) >= 3
cf_filtered_counts <- cr_raw_counts[keep_genes,]
sum(keep_genes)
# Distribution of the filtered counts
boxplot(log2(as.matrix(cf_filtered_counts)+1),ylab=expression('Log'[2]~'Read counts'),las=2,main="Filtered data")
hist(rowSums(cf_filtered_counts>3))
# Since no samples were discarded, the metadata file will remain the same. And we can check that the labels are in the same order in counts and metadata
all.equal(colnames(cf_filtered_counts),rownames(mr_metatable))
all(colnames(cf_filtered_counts) == rownames(mr_metatable))
write.csv(cf_filtered_counts,"./data/counts_filtered.csv",quote=F)
mr_metatable$group <- factor(mr_metatable$group)
d <- DESeqDataSetFromMatrix(countData=cf_filtered_counts,colData=mr_metatable,design=~group + visit)
cf_filtered_counts <- read.csv("data/counts_filtered.csv",stringsAsFactors=F,row.names=1)
if(!exists("mr_metatable")) mr_metatable <- read.csv("data/metadata_raw.csv",stringsAsFactors=F,row.names=1)
all.equal(colnames(cf),rownames(mr))
mr_metatable$group <- factor(mr_metatable$group)
d <- DESeqDataSetFromMatrix(countData=cf,colData=mr_metatable,design=~group + visit)
# DESeq2 Design formula: condition of interest should come last in the formula with the other factors preceding it in any order
d <- DESeq2::estimateSizeFactors(d,type="ratio")
cd <- log2( counts(d,normalized=TRUE) + 1 )
saveRDS(cd,"data/gene_counts_normalised_deseq2.Rds")
cd <- readRDS("data/gene_counts_normalised_deseq2.Rds")
boxplot(cd,ylab=expression('Log'[2]~'Read counts'),las=2,main="DESeq2")
cf_filtered_counts <- read.csv("data/counts_filtered.csv",stringsAsFactors=F,row.names=1)
if(!exists("mr_metatable")) mr_metatable <- read.csv("data/metadata_raw.csv",stringsAsFactors=F,row.names=1)
all.equal(colnames(cf_filtered_counts),rownames(mr_metatable))
mr_metatable$group <- factor(mr_metatable$group)
d_deseq_data <- DESeqDataSetFromMatrix(countData=cf_filtered_counts,colData=mr_metatable,design=~group + visit)
d_deseq_data <- DESeq2::estimateSizeFactors(d_deseq_data,type="ratio")
cd <- log2( counts(d_deseq_data,normalized=TRUE) + 1 )
saveRDS(cd,"data/gene_counts_normalised_deseq2.Rds")
cd <- readRDS("data/gene_counts_normalised_deseq2.Rds")
boxplot(cd,ylab=expression('Log'[2]~'Read counts'),las=2,main="DESeq2")
knitr::opts_knit$set(echo = TRUE,
root.dir = getwd(),
fig.width = 6, fig.height = 5,
warning = FALSE,
message = FALSE)
result.dir <- paste0("results/",Sys.Date(),"/")
## creates result.dir with date in if not existent
ifelse(isFALSE(dir.exists(paste0("../",result.dir))), dir.create(paste0("../",result.dir),recursive = TRUE),"Result directory for today exists already!")
options(stringsAsFactors = FALSE)
#Load libraries
#if you do not have libraries, they are located in either CRAN or Bioconductor
library(kableExtra)
library(forcats)
library(caret)
library(C50)
library(mgsub)
library(dplyr)
library(DESeq2)
library(pheatmap)
library(ggplot2)
library(ggrepel)
library(RColorBrewer)
library(limma)
library(edgeR)
library(enrichR)
library(gridExtra)
library(stringr)
library(ggVennDiagram)
library(biomaRt)
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
#reading data
sampleTable <- read.csv("data/proces-data_core-facility/sample_metadata.csv")
#gonna add more
countTable <- data.table::fread("data/proces-data_core-facility/subreadCounts_hg38ens_minus.txt", header = TRUE, sep = "\t") %>%
as.data.frame()
genes <- countTable$Geneid
G_list <- getBM(filters= "ensembl_gene_id",
attributes= c("ensembl_gene_id",
"hgnc_symbol"),
values=genes,
mart= mart)
G_list <- G_list[G_list$hgnc_symbol != "",]
cr <- countTable[,7:45]
rownames(cr) <- countTable$Geneid
#gsub('P22761_100', '', sampleTable$sample_ID, fixed = TRUE)
mr <- sampleTable
rownames(mr) <- sampleTable$sample_ID
str_trim(mr$group, side = c("both"))
all.equal(colnames(cr),rownames(mr))
all(rownames(mr) == colnames(cr))
write.csv(cr,file="data/gene_counts_raw.csv",quote=FALSE)
write.csv(mr,file="data/metadata_raw.csv",quote=FALSE)
# visualise the distribution of counts using a boxplot and density plot
rafalib::mypar(1,2,mar=c(6,3,3,2))
boxplot(log2(as.matrix(cr)+1),ylab=expression('Log'[2]~'Read counts'),las=2,main="Raw data")
hist(log2(as.matrix(cr)+1),ylab="",las=2,main="Raw data")
par(mfrow=c(1,1))
# check if any samples need to be discarded based on the number of genes detected
barplot(colSums(cr>3),ylab="Number of detected genes",las=2)
abline(h=median(colSums(cr>3)))
# plot for detection rate across genes
hist(rowSums(cr>3))
# remove genes with low counts
# what should be the cut off? How many reads in how many samples? 3-5
keep_genes <- rowSums( cr > 5 ) >= 3
cf <- cr[keep_genes,]
sum(keep_genes)
# Distribution of the filtered counts
boxplot(log2(as.matrix(cf)+1),ylab=expression('Log'[2]~'Read counts'),las=2,main="Filtered data")
hist(rowSums(cf>3))
# Since no samples were discarded, the metadata file will remain the same. And we can check that the labels are in the same order in counts and metadata
all.equal(colnames(cf),rownames(mr))
all(colnames(cf) == rownames(mr))
write.csv(cf,"./data/counts_filtered.csv",quote=F)
cf <- read.csv("data/counts_filtered.csv",stringsAsFactors=F,row.names=1)
if(!exists("mr")) mr <- read.csv("data/metadata_raw.csv",stringsAsFactors=F,row.names=1)
all.equal(colnames(cf),rownames(mr))
mr$group <- factor(mr$group)
d <- DESeqDataSetFromMatrix(countData=cf,colData=mr,design=~group + visit)
# DESeq2 Design formula: condition of interest should come last in the formula with the other factors preceding it in any order
d <- DESeq2::estimateSizeFactors(d,type="ratio")
cd <- log2( counts(d,normalized=TRUE) + 1 )
saveRDS(cd,"data/gene_counts_normalised_deseq2.Rds")
cd <- readRDS("data/gene_counts_normalised_deseq2.Rds")
boxplot(cd,ylab=expression('Log'[2]~'Read counts'),las=2,main="DESeq2")
# Use DESeq object created above
# Transform the normalized counts
vst <- vst(d, blind=TRUE)
#vst <- rlog(d, blind = TRUE)
# Extract the vst matrix of transformed counts
vst_mat <- assay(vst)
# Compute pairwise correlation values (cluster by sample)
vst_cor_mat <- cor(vst_mat)
View(vst_cor_mat)
# Plot heatmap
mr <- mr %>%
mutate(visit = as.factor(visit))
pheatmap(vst_cor_mat, annotation = select(mr, visit, group), clustering_method = "ward.D2")
# Plot PCA
DESeq2::plotPCA(vst, intgroup="group")
#For the purpose of exploratory analysis such as MDS, PCA, clustering etc, VST (variance-stabilizing-transformation) is recommended
cv <- as.data.frame(assay(varianceStabilizingTransformation(d,blind=T)),check.names=F)
#??varianceStabilizingTransformation
write.csv(cv,"./data/gene_counts_vst.csv",quote=FALSE)
boxplot(cv,ylab=expression('Log'[2]~'Read counts'),las=2,main="VST")
pca <- prcomp(t(cv), scale=TRUE)
#prcomp expect samples-rows, genes-columns, t-function reverses
plot(pca$x[,1], pca$x[,2]) # x = PCs
## make a scree plot to compute PC variance
pca.var <- pca$sdev^2
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
barplot(pca.var.per, main="Scree Plot", xlab="Principal Component", ylab="Percent Variation")
## plot showing the PCs and the variation:
pca.data <- data.frame(Sample=rownames(pca$x),
X=pca$x[,1],
Y=pca$x[,2])
pca.data
#visit and group columns
pca.data_join <-  cbind(pca.data, mr[c("visit", "group")])
ggplot(data=pca.data_join, aes(x=X, y=Y, label=Sample)) +
geom_point(aes(color=group)) +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("My PCA Graph")
## name of the top 10  genes that contribute most to pc1.
loading_scores <- pca$rotation[,1]
gene_scores <- abs(loading_scores) ## get the magnitudes
gene_score_ranked <- sort(gene_scores, decreasing=TRUE)
top_10_genes <- names(gene_score_ranked[1:10])
top_10_genes ## show the names of the top 10 genes
pca$rotation[top_10_genes,1] ## show the scores (and +/- sign)
